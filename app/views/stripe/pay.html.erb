<html>
  <head>
    <script src="https://js.stripe.com/v3/"></script>
    <script
      src="https://code.jquery.com/jquery-3.3.1.min.js"
      integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
      crossorigin="anonymous"></script>
    <script 
      src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/js/bootstrap.bundle.min.js"
      integrity="sha256-uz0BcnPtSHZ02XZthAHPRYIoWWrcwMOmAk9ErnFQkNs="
      crossorigin="anonymous"></script>
    <link 
      rel="stylesheet" 
      href="https://use.fontawesome.com/releases/v5.0.9/css/all.css" 
      integrity="sha384-5SOiIsAziJl6AWe0HWRKTXlfcSHKmYV4RBF18PPJ173Kzn7jzMyFuTtk8JA7QQG1" 
      crossorigin="anonymous">
    <style>
      body {
        margin: 0;
      }      
      .row {
        display: -ms-flexbox;
        display: flex;
        margin: 0 5px 10px;
      }
      .field {
        position: relative;
        width: 100%;
        height: 2.5rem;
        margin: 0 10px;
        background: #fff;
        border-radius: 4px;
      }
      .field.half-width {
        width: 50%;
      }

      .baseline {
        position: absolute;
        width: 100%;
        height: 1px;
        left: 0;
        bottom: 0;
        background-color: transparent;
        transition: background-color 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
      }

      label {
        position: absolute;
        width: 100%;
        left: 7px;
        bottom: 8px;
        color: #333;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        transform-origin: 0 50%;
        cursor: text;
        transition-property: color, transform;
        transition-duration: 0.3s;
        transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
      }

      .input {
        position: absolute;
        width: 100%;
        left: 10px;
        bottom: 0;
        padding-bottom: 7px;
        color: #32325d;
        background-color: transparent;
      }

      .input::-webkit-input-placeholder {
        color: transparent;
        transition: color 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
      }

      .input::-moz-placeholder {
        color: transparent;
        transition: color 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
      }

      .input:-ms-input-placeholder {
        color: transparent;
        transition: color 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
      }

      .input.StripeElement {
        opacity: 0;
        transition: opacity 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
        will-change: opacity;
      }

      .input.focused,
      .input:not(.empty) {
        opacity: 1;
      }

      .input.focused::-webkit-input-placeholder,
      .input:not(.empty)::-webkit-input-placeholder {
        color: #cfd7df;
      }

      .input.focused::-moz-placeholder,
      .input:not(.empty)::-moz-placeholder {
        color: #cfd7df;
      }

      .input.focused:-ms-input-placeholder,
      .input:not(.empty):-ms-input-placeholder {
        color: #cfd7df;
      }

      .input.focused + label,
      .input:not(.empty) + label {
        color: #aab7c4;
        transform: scale(0.70) translateY(-25px);
        cursor: default;
      }

      .input.focused + label {
        color: #45b29d;
      }
      .input.focused + label > i{
        display: none;
      }
      #cvc-icon {
        cursor: pointer;
        margin-left: 5px;
      }
      .input.invalid + label {
        color: #ffa27b;
      }

      .input.focused + label + .baseline {
        background-color: #45b29d;
      }

      .input.focused.invalid + label + .baseline {
        background-color: #e25950;
      }

      input, button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        outline: none;
        border-style: none;
      }

      input:-webkit-autofill {
        -webkit-text-fill-color: #e39f48;
        transition: background-color 100000000s;
        -webkit-animation: 1ms void-animation-out;
      }

      .StripeElement--webkit-autofill {
        background: transparent !important;
      }

      input:active {
        background-color: #159570;
      }
      
      #card-errors {
        font-size: 12px;
        margin-top: 10px;
        /* margin-bottom: 5em; */
        margin-left: 1.5em;
        color: #E25950 !important;
      }

      .popover {
        position: absolute;
        z-index: 10;
        margin-left: 20px;
        margin-top: 90px;
        max-width: 200px;
      }
    </style>
  </head>
  <body>
    <div class="payment-form" id="payment">
      <form>
        <div class="row">
          <div class="field">
            <div id="card-number" class="input empty"></div>
            <label for="card-number">Card number</label>
          </div>
        </div>
        <div class="row">
          <div class="field half-width">
            <div id="card-expiry" class="input empty"></div>
            <label for="card-expiry">Expiry date</label>
          </div>
          <div class="field half-width">
            <div id="card-cvc" class="input empty"></div>
            <label for="card-cvc">
              Security code<i data-toggle="popover" class="far fa-question-circle" id="cvc-icon"></i>
            </label>
          </div>
        </div>
        <div id="card-errors" role="alert"></div>
      </form>

      </div>



    <script>
      function saveTokenAndChargeCard(token, donationAmount, metadata, source, key, recurring, date) {
        var url = '<%= "#{pay_url(@processor)}?key=#{@api_user.key}" %>';
        var data = JSON.stringify({
          token: token.id,
          metadata: metadata,
          source: source,
          idempotency_key: key,
          amount: donationAmount,
          recurring: recurring,
          date: date
        });

        var request = new XMLHttpRequest();
        request.open('POST', url, true);
        request.setRequestHeader('Content-Type', 'application/json');

        request.onload = function() {
          var response = JSON.parse(request.responseText);
          if (response.status) {
            data = {
              action: "donationProcessed",
              response: response
            };
            parent.postMessage(data, "*");
          } else {
            console.log("error")
          }
        };

        request.onerror = function() {
          console.log('error 2');
        }

        request.send(data);
      }

      var stripe = Stripe('<%= @stripe_publishable_key %>');
      var elements = stripe.elements();
      var elementStyles = {
        base: {
          color: '#32325D',
          fontWeight: 500,
          fontFamily: 'Source Code Pro, Consolas, Menlo, monospace',
          fontSize: '16px',
          fontSmoothing: 'antialiased',

          '::placeholder': {
            color: '#CFD7DF',
          },
          ':-webkit-autofill': {
            color: '#e39f48',
          },
        },
        invalid: {
          color: '#E25950',

          '::placeholder': {
            color: '#FFCCA5',
          },
        },
      };
      
      var inputs = document.querySelectorAll('.payment-form .input');
      Array.prototype.forEach.call(inputs, function(input) {
        input.addEventListener('focus', function() {
          input.classList.add('focused');
        });
        input.addEventListener('blur', function() {
          input.classList.remove('focused');
        });
        input.addEventListener('keyup', function() {
          if (input.value.length === 0) {
            input.classList.add('empty');
          } else {
            input.classList.remove('empty');
          }
        });
      });

      var elementClasses = {
        focus: 'focused',
        empty: 'empty',
        invalid: 'invalid',
      };
      
      var cardNumber = elements.create('cardNumber', {
        style: elementStyles,
        classes: elementClasses,
      });
      cardNumber.mount('#card-number');
      
      var cardExpiry = elements.create('cardExpiry', {
        style: elementStyles,
        classes: elementClasses,
      });
      cardExpiry.mount('#card-expiry');
      
      var cardCvc = elements.create('cardCvc', {
        style: elementStyles,
        classes: elementClasses,
      });
      cardCvc.mount('#card-cvc');

      cardNumber.addEventListener('change', function(event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
          parent.postMessage("card number error","*");
          displayError.textContent = event.error.message;
        } else {
          parent.postMessage("card number valid","*");
          displayError.textContent = '';
        }
      });
      
      cardExpiry.addEventListener('change', function(event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
          parent.postMessage("card exp error","*");
          displayError.textContent = event.error.message;
        } else {
          parent.postMessage("card exp valid","*");
          displayError.textContent = '';
        }
      });
      
      cardCvc.addEventListener('change', function(event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
          parent.postMessage("card cvc error","*");
          displayError.textContent = event.error.message;
        } else {
          parent.postMessage("card cvc valid","*");
          displayError.textContent = '';
        }
      });
      
      $('#cvc-icon').popover({
        trigger: 'hover',
        container: 'body',
        html: true,
        content: '<img src="https://s3.amazonaws.com/leadnow-identity/uploads/cvv.png" style="width:100%"/>'
      });

      function registerElements(elements, donationAmount, metadata, source, key, recurring, date) {
        var form = document.getElementById('payment');
        var error = document.getElementById('card-errors');

        stripe.createToken(elements[0], metadata).then(function(result) {
          if (result.error) {
            var errorElement = document.getElementById('card-errors');
            errorElement.textContent = result.error.message;
          } else {
            saveTokenAndChargeCard(result.token, donationAmount, metadata, source, key, recurring, date);
          }
        });
      }

      window.addEventListener("message", function(event) {
        var data = event.data;
        if (data.action === "submit") {
          registerElements([cardNumber, cardExpiry, cardCvc], data.donationAmount, data.metadata, data.source, data.idempotency_key, data.recurring, data.date);
        }
      }, false);
    </script>
  </body>
</html>
